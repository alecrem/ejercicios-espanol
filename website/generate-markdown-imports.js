import { readFileSync, writeFileSync, mkdirSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));

// Source paths
const sourceBase = join(__dirname, '..', 'ejercicios-src', 'markdown');
const outputDir = join(__dirname, 'app', 'data');

// Create output directory if it doesn't exist
if (!existsSync(outputDir)) {
  mkdirSync(outputDir, { recursive: true });
}

const tenses = ['present-tense', 'past-tense'];
const cuadernillos = ['cuadernillo-1-ar-verbs', 'cuadernillo-2-er-verbs', 'cuadernillo-3-ir-verbs', 'cuadernillo-4-mixed-verbs'];
const languages = ['japanese', 'english'];
const pages = [
  'pagina-1-dialogo.md',
  'pagina-2-conjugacion-completar.md', 
  'pagina-3-eleccion.md',
  'pagina-4-transformacion.md',
  'pagina-5-ordenar.md',
  'pagina-6-bien-mal.md'
];

console.log('Generating markdown imports...');

let generatedContent = `// Auto-generated file - do not edit manually
// Generated by generate-markdown-imports.js

export interface CuadernilloContent {
  dialogue: string;
  conjugation: string;
  choice: string;
  transformation: string;
  ordering: string;
  evaluation: string;
}

export const markdownContent: Record<string, Record<string, Record<string, CuadernilloContent>>> = {
`;

let totalFiles = 0;
let processedFiles = 0;

for (const tense of tenses) {
  generatedContent += `  '${tense}': {\n`;
  
  for (const cuadernillo of cuadernillos) {
    const cuadernilloNumber = cuadernillo.match(/cuadernillo-(\d+)/)[1];
    generatedContent += `    '${cuadernilloNumber}': {\n`;
    
    for (const language of languages) {
      generatedContent += `      '${language}': {\n`;
      
      const sourceDir = join(sourceBase, tense, cuadernillo, language);
      
      const pageMapping = {
        'pagina-1-dialogo.md': 'dialogue',
        'pagina-2-conjugacion-completar.md': 'conjugation',
        'pagina-3-eleccion.md': 'choice',
        'pagina-4-transformacion.md': 'transformation',
        'pagina-5-ordenar.md': 'ordering',
        'pagina-6-bien-mal.md': 'evaluation'
      };
      
      for (const page of pages) {
        const sourcePath = join(sourceDir, page);
        const key = pageMapping[page];
        totalFiles++;
        
        try {
          const content = readFileSync(sourcePath, 'utf-8');
          // Escape backticks and backslashes for template literal
          const escapedContent = content
            .replace(/\\/g, '\\\\')
            .replace(/`/g, '\\`')
            .replace(/\$\{/g, '\\${');
          
          generatedContent += `        ${key}: \`${escapedContent}\`,\n`;
          processedFiles++;
        } catch (error) {
          console.error(`✗ Failed to read ${sourcePath}:`, error.message);
          generatedContent += `        ${key}: '',\n`;
        }
      }
      
      generatedContent += `      },\n`;
    }
    
    generatedContent += `    },\n`;
  }
  
  generatedContent += `  },\n`;
}

generatedContent += `};
`;

// Write the generated TypeScript file
const outputPath = join(outputDir, 'markdown-content.ts');
writeFileSync(outputPath, generatedContent);

console.log(`✓ Generated markdown imports: ${processedFiles}/${totalFiles} files processed`);
console.log(`✓ Generated file: ${outputPath}`);